import streamlit as st
import pandas as pd
import backend_fit
import datetime

# --- Session State Management ---
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'user_id' not in st.session_state:
    st.session_state.user_id = None
if 'user_profile' not in st.session_state:
    st.session_state.user_profile = {}

# --- Helper Functions ---
def logout():
    st.session_state.logged_in = False
    st.session_state.user_id = None
    st.session_state.user_profile = {}
    st.experimental_rerun()

def get_user_by_email(email):
    user_data = backend_fit.get_user_by_email(email)
    if user_data is not None and not user_data.empty:
        st.session_state.logged_in = True
        st.session_state.user_id = user_data.iloc[0]['user_id']
        st.session_state.user_profile = user_data.iloc[0].to_dict()
    else:
        st.session_state.logged_in = False
        st.session_state.user_id = None
        st.session_state.user_profile = {}

def create_new_user(name, email, weight):
    user_id = backend_fit.create_user(name, email, weight)
    if user_id:
        st.session_state.logged_in = True
        st.session_state.user_id = user_id
        st.session_state.user_profile = {'user_id': user_id, 'name': name, 'email': email, 'weight': weight}
        st.success("Account created successfully! You are now logged in.")
        st.experimental_rerun()
    else:
        st.error("Could not create user. An account with this email might already exist.")

# --- UI Layout ---
st.title("üí™ Personal Fitness Tracker")

# Initial setup: create tables and handle login/registration
if not backend_fit.create_tables():
    st.error("Failed to connect to the database. Please check your `backend_fit.py` credentials and try again.")
    st.stop()

if not st.session_state.logged_in:
    st.subheader("Login or Create Account")
    email_input = st.text_input("Enter your email:")
    col_login, col_create = st.columns(2)

    with col_login:
        if st.button("Login"):
            if email_input:
                get_user_by_email(email_input)
                if not st.session_state.logged_in:
                    st.warning("User not found. Please create an account.")
    
    with col_create:
        if st.button("Create New Account"):
            with st.form("new_user_form"):
                new_name = st.text_input("Name")
                new_email = st.text_input("Email")
                new_weight = st.number_input("Weight (kg)", min_value=1.0, format="%.2f")
                if st.form_submit_button("Create Account"):
                    if new_name and new_email and new_weight:
                        create_new_user(new_name, new_email, new_weight)
                    else:
                        st.error("Please fill in all fields.")

    st.markdown("---")
else:
    # --- Main Application UI ---
    st.sidebar.title(f"Hello, {st.session_state.user_profile['name']}!")
    if st.sidebar.button("Logout"):
        logout()

    tab1, tab2, tab3, tab4 = st.tabs(["üìä Dashboard", "üèãÔ∏è Log Workout", "ü§ù Friends & Leaderboard", "‚öôÔ∏è Profile"])

    with tab1:
        st.header("Your Fitness Dashboard")
        st.write("Welcome to your personal fitness tracker. Track your progress, log new workouts, and connect with friends!")
        
        # Displaying a summary of workouts
        user_workouts_df = backend_fit.get_user_workouts(st.session_state.user_id)
        if not user_workouts_df.empty:
            st.subheader("Recent Workouts")
            st.dataframe(user_workouts_df.head(5))
        else:
            st.info("You haven't logged any workouts yet.")

    with tab2:
        st.header("Log a New Workout")
        with st.form("new_workout_form"):
            workout_date = st.date_input("Workout Date", datetime.date.today())
            duration = st.number_input("Duration (minutes)", min_value=1, step=1)
            description = st.text_area("Workout Description")

            st.subheader("Exercises")
            exercises = []
            num_exercises = st.number_input("Number of exercises", min_value=1, step=1, value=1)
            for i in range(num_exercises):
                st.markdown(f"**Exercise {i+1}**")
                name = st.text_input(f"Exercise Name", key=f"ex_name_{i}")
                reps = st.number_input(f"Reps", min_value=1, step=1, key=f"ex_reps_{i}")
                sets = st.number_input(f"Sets", min_value=1, step=1, key=f"ex_sets_{i}")
                weight = st.number_input(f"Weight Lifted (kg)", min_value=0.0, format="%.2f", key=f"ex_weight_{i}")
                exercises.append({'name': name, 'reps': reps, 'sets': sets, 'weight': weight})
            
            submitted = st.form_submit_button("Log Workout")
            if submitted:
                if duration and description and all(ex['name'] for ex in exercises):
                    success = backend_fit.log_new_workout(st.session_state.user_id, workout_date, duration, description, exercises)
                    if success:
                        st.success("Workout logged successfully!")
                        st.experimental_rerun()
                    else:
                        st.error("Failed to log workout.")
                else:
                    st.error("Please fill in all workout details and exercise names.")

    with tab3:
        st.header("Friends & Leaderboard")
        st.subheader("Current Friends")
        friends = backend_fit.get_user_friends(st.session_state.user_id)
        if friends:
            friends_df = pd.DataFrame(friends)
            st.dataframe(friends_df, use_container_width=True)
            
            friend_emails = friends_df['email'].tolist()
            friend_email_to_remove = st.selectbox("Select friend to remove", options=[''] + friend_emails)
            if st.button("Remove Friend"):
                friend_id_to_remove = friends_df[friends_df['email'] == friend_email_to_remove]['user_id'].iloc[0]
                if backend_fit.remove_friend(st.session_state.user_id, friend_id_to_remove):
                    st.success("Friend removed successfully!")
                    st.experimental_rerun()
                else:
                    st.error("Could not remove friend.")
        else:
            st.info("You don't have any friends yet.")
            
        st.subheader("Add a Friend")
        friend_email = st.text_input("Enter your friend's email to add them:")
        if st.button("Add Friend"):
            success, message = backend_fit.add_friend(st.session_state.user_id, friend_email)
            if success:
                st.success(message)
                st.experimental_rerun()
            else:
                st.error(message)
        
        st.subheader("Weekly Leaderboard")
        leaderboard_df = backend_fit.get_weekly_leaderboard(st.session_state.user_id)
        if not leaderboard_df.empty:
            leaderboard_df.index = leaderboard_df.index + 1
            st.dataframe(leaderboard_df)
        else:
            st.info("No leaderboard data available. Log workouts or add friends to see the leaderboard.")
            

    with tab4:
        st.header("Your Profile")
        profile = st.session_state.user_profile
        
        st.write(f"**Name:** {profile['name']}")
        st.write(f"**Email:** {profile['email']}")
        st.write(f"**Weight:** {profile['weight']} kg")
        
        with st.form("update_profile_form"):
            new_name = st.text_input("Update Name", value=profile['name'])
            new_email = st.text_input("Update Email", value=profile['email'])
            new_weight = st.number_input("Update Weight (kg)", min_value=1.0, format="%.2f", value=float(profile['weight']))
            if st.form_submit_button("Update Profile"):
                success = backend_fit.update_user_profile(st.session_state.user_id, new_name, new_email, new_weight)
                if success:
                    st.success("Profile updated successfully!")
                    get_user_by_email(new_email)
                    st.experimental_rerun()
                else:
                    st.error("Failed to update profile.")
