import psycopg2
import uuid
import pandas as pd
from datetime import datetime, timedelta
from decimal import Decimal

# NOTE: Update these with your actual PostgreSQL credentials
DB_HOST = "localhost"
DB_NAME = "fitness"
DB_USER = "postgres"
DB_PASSWORD = "Ximecollegerocks"

def get_connection():
    """Establishes a connection to the PostgreSQL database."""
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
        return conn
    except psycopg2.OperationalError as e:
        print(f"Error connecting to database: {e}")
        return None

def create_tables():
    """Creates all necessary tables if they don't exist."""
    conn = get_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        user_id VARCHAR(255) PRIMARY KEY,
                        name VARCHAR(255) NOT NULL,
                        email VARCHAR(255) UNIQUE NOT NULL,
                        weight DECIMAL(5, 2)
                    );
                    CREATE TABLE IF NOT EXISTS friendships (
                        user_id VARCHAR(255) REFERENCES users(user_id) ON DELETE CASCADE,
                        friend_id VARCHAR(255) REFERENCES users(user_id) ON DELETE CASCADE,
                        PRIMARY KEY (user_id, friend_id)
                    );
                    CREATE TABLE IF NOT EXISTS workouts (
                        workout_id VARCHAR(255) PRIMARY KEY,
                        user_id VARCHAR(255) REFERENCES users(user_id) ON DELETE CASCADE,
                        workout_date DATE NOT NULL,
                        duration_minutes INTEGER NOT NULL,
                        description TEXT
                    );
                    CREATE TABLE IF NOT EXISTS exercises (
                        exercise_id VARCHAR(255) PRIMARY KEY,
                        workout_id VARCHAR(255) REFERENCES workouts(workout_id) ON DELETE CASCADE,
                        exercise_name VARCHAR(255),
                        reps INTEGER,
                        sets INTEGER,
                        weight_lifted DECIMAL(10, 2)
                    );
                """)
            conn.commit()
            return True
        except Exception as e:
            print(f"Error creating tables: {e}")
            return False
        finally:
            conn.close()

# --- User Profile CRUD ---
def create_user(name, email, weight):
    """Creates a new user profile."""
    conn = get_connection()
    if conn:
        try:
            user_id = str(uuid.uuid4())
            decimal_weight = Decimal(str(weight))
            with conn.cursor() as cur:
                cur.execute("INSERT INTO users (user_id, name, email, weight) VALUES (%s, %s, %s, %s);", (user_id, name, email, decimal_weight))
            conn.commit()
            return user_id
        except Exception as e:
            print(f"Error creating user: {e}")
            return None
        finally:
            conn.close()

def get_user_by_email(email):
    """Retrieves a user's profile by email."""
    conn = get_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id, name, email, weight FROM users WHERE email = %s;", (email,))
                user_data = cur.fetchone()
                if user_data:
                    cols = ['user_id', 'name', 'email', 'weight']
                    return pd.DataFrame([user_data], columns=cols)
                return pd.DataFrame()
        except Exception as e:
            print(f"Error fetching user: {e}")
            return pd.DataFrame()
        finally:
            conn.close()

def update_user_profile(user_id, name, email, weight):
    """Updates an existing user's profile."""
    conn = get_connection()
    if conn:
        try:
            decimal_weight = Decimal(str(weight))
            with conn.cursor() as cur:
                cur.execute("UPDATE users SET name = %s, email = %s, weight = %s WHERE user_id = %s;", (name, email, decimal_weight, user_id))
            conn.commit()
            return True
        except Exception as e:
            print(f"Error updating user profile: {e}")
            return False
        finally:
            conn.close()

# --- Workout Tracking CRUD ---
def log_new_workout(user_id, workout_date, duration_minutes, description, exercises):
    """Logs a new workout and its exercises."""
    conn = get_connection()
    workout_id = str(uuid.uuid4())
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("INSERT INTO workouts (workout_id, user_id, workout_date, duration_minutes, description) VALUES (%s, %s, %s, %s, %s);", (workout_id, user_id, workout_date, duration_minutes, description))
                
                for exercise in exercises:
                    exercise_id = str(uuid.uuid4())
                    cur.execute("INSERT INTO exercises (exercise_id, workout_id, exercise_name, reps, sets, weight_lifted) VALUES (%s, %s, %s, %s, %s, %s);",
                                (exercise_id, workout_id, exercise['name'], exercise['reps'], exercise['sets'], exercise['weight']))
            conn.commit()
            return True
        except Exception as e:
            print(f"Error logging workout: {e}")
            return False
        finally:
            conn.close()

def get_user_workouts(user_id):
    """Retrieves a user's workout history."""
    conn = get_connection()
    if not conn: return pd.DataFrame()
    try:
        query = """
        SELECT
            w.workout_date,
            w.duration_minutes,
            w.description,
            e.exercise_name,
            e.reps,
            e.sets,
            e.weight_lifted
        FROM workouts w
        JOIN exercises e ON w.workout_id = e.workout_id
        WHERE w.user_id = %s
        ORDER BY w.workout_date DESC, w.duration_minutes DESC;
        """
        df = pd.read_sql_query(query, conn, params=(user_id,))
        return df
    except Exception as e:
        print(f"Error fetching workouts: {e}")
        return pd.DataFrame()
    finally:
        conn.close()

# --- Social Connections CRUD ---
def get_user_friends(user_id):
    """Retrieves a list of friends for a given user."""
    conn = get_connection()
    if not conn: return []
    try:
        query = """
        SELECT u.user_id, u.name, u.email
        FROM friendships f
        JOIN users u ON f.friend_id = u.user_id
        WHERE f.user_id = %s;
        """
        df = pd.read_sql_query(query, conn, params=(user_id,))
        return df.to_dict('records')
    except Exception as e:
        print(f"Error fetching friends: {e}")
        return []
    finally:
        conn.close()

def add_friend(user_id, friend_email):
    """Adds a new friend connection."""
    conn = get_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id FROM users WHERE email = %s;", (friend_email,))
                friend_id = cur.fetchone()
                if not friend_id: return False, "Friend not found."
                
                friend_id = friend_id[0]
                
                if user_id == friend_id: return False, "Cannot add yourself as a friend."
                
                # Check if friendship already exists
                cur.execute("SELECT COUNT(*) FROM friendships WHERE user_id = %s AND friend_id = %s;", (user_id, friend_id))
                if cur.fetchone()[0] > 0: return False, "Friendship already exists."

                cur.execute("INSERT INTO friendships (user_id, friend_id) VALUES (%s, %s);", (user_id, friend_id))
                cur.execute("INSERT INTO friendships (user_id, friend_id) VALUES (%s, %s);", (friend_id, user_id))
            conn.commit()
            return True, "Friend added successfully!"
        except Exception as e:
            print(f"Error adding friend: {e}")
            return False, "An error occurred."
        finally:
            conn.close()

def remove_friend(user_id, friend_id):
    """Removes a friend connection."""
    conn = get_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM friendships WHERE (user_id = %s AND friend_id = %s) OR (user_id = %s AND friend_id = %s);", (user_id, friend_id, friend_id, user_id))
            conn.commit()
            return True
        except Exception as e:
            print(f"Error removing friend: {e}")
            return False
        finally:
            conn.close()

# --- Leaderboard Logic ---
def get_weekly_leaderboard(user_id):
    """Calculates a leaderboard for the user and their friends based on total workout minutes for the current week."""
    conn = get_connection()
    if not conn: return pd.DataFrame()
    
    try:
        today = datetime.now().date()
        start_of_week = today - timedelta(days=today.weekday())
        
        friend_ids_df = pd.read_sql_query(f"SELECT friend_id FROM friendships WHERE user_id = '{user_id}';", conn)
        friend_ids = friend_ids_df['friend_id'].tolist()
        all_ids = [user_id] + friend_ids
        
        query = f"""
        SELECT
            u.name,
            SUM(w.duration_minutes) AS total_minutes
        FROM workouts w
        JOIN users u ON w.user_id = u.user_id
        WHERE w.user_id IN ({', '.join([f"'{uid}'" for uid in all_ids])})
        AND w.workout_date >= '{start_of_week}'
        GROUP BY u.name
        ORDER BY total_minutes DESC;
        """
        leaderboard_df = pd.read_sql_query(query, conn)
        return leaderboard_df
    except Exception as e:
        print(f"Error fetching leaderboard: {e}")
        return pd.DataFrame()
    finally:
        conn.close()
